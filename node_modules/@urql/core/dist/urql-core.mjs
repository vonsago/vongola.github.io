import { visit } from "graphql/language/visitor";

import { Kind } from "graphql/language/kinds";

import { print } from "graphql/language/printer";

import { parse } from "graphql/language/parser";

import { GraphQLError } from "graphql/error/GraphQLError";

import { share, onPush, takeWhile, toPromise, take, filter, map, tap, merge, mergeMap, takeUntil, make, switchMap, fromValue, interval, makeSubject, publish, onStart, onEnd, subscribe } from "wonka";

function g() {
  return (g = Object.assign || function(a) {
    for (var b = 1; b < arguments.length; b++) {
      var d, c = arguments[b];
      for (d in c) {
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
      }
    }
    return a;
  }).apply(this, arguments);
}

function q(a) {
  return "string" == typeof a ? new GraphQLError(a) : "object" == typeof a && a.message ? new GraphQLError(a.message, a.nodes, a.source, a.positions, a.path, a, a.extensions || {}) : a;
}

function r() {
  return this.message;
}

var t = function(a) {
  function b(b) {
    var c = b.networkError, e = b.response;
    var f = function p(a, b) {
      var d = "";
      if (void 0 !== a) {
        return d = "[Network] " + a.message;
      }
      void 0 !== b && b.forEach((function c(a) {
        d += "[GraphQL] " + a.message + "\n";
      }));
      return d.trim();
    }(c, b = (b.graphQLErrors || []).map(q));
    a.call(this, f);
    this.name = "CombinedError";
    this.message = f;
    this.graphQLErrors = b;
    this.networkError = c;
    this.response = e;
  }
  a && (b.__proto__ = a);
  (b.prototype = Object.create(a && a.prototype)).constructor = b;
  b.prototype.toString = r;
  return b;
}(Error);

function u(a, b) {
  a |= 0;
  for (var c = 0, d = 0 | b.length; c < d; c++) {
    a = (a << 5) + a + b.charCodeAt(c);
  }
  return a;
}

var v = new Set, w = new WeakMap;

function y(a) {
  v.clear();
  return function x(a) {
    if (null === a || v.has(a)) {
      return "null";
    }
    if ("object" != typeof a) {
      return JSON.stringify(a) || "";
    }
    if (a.toJSON) {
      return a.toJSON();
    }
    if (Array.isArray(a)) {
      for (var b = "[", c = 0, d = a.length; c < d; c++) {
        0 < c && (b += ",");
        var e = x(a[c]);
        b += 0 < e.length ? e : "null";
      }
      return b + "]";
    }
    if (!(b = Object.keys(a).sort()).length && a.constructor && a.constructor !== Object) {
      return b = w.get(a) || Math.random().toString(36).slice(2), w.set(a, b), '{"__key":"' + b + '"}';
    }
    v.add(a);
    c = "{";
    d = 0;
    for (e = b.length; d < e; d++) {
      var f = b[d], l = x(a[f]);
      l && (1 < c.length && (c += ","), c += x(f) + ":" + l);
    }
    v.delete(a);
    return c + "}";
  }(a);
}

var z = Object.create(null);

function A(a, b) {
  if ("string" == typeof a) {
    var c = u(5381, a.replace(/[\s,]+/g, " ").trim()) >>> 0;
    a = void 0 !== z[c] ? z[c] : parse(a);
  } else {
    void 0 !== a.__key ? c = a.__key : (c = u(5381, print(a).replace(/[\s,]+/g, " ").trim()) >>> 0, 
    a = void 0 !== z[c] ? z[c] : a);
  }
  z[c] = a;
  a.__key = c;
  return {
    key: b ? u(c, y(b)) >>> 0 : c,
    query: a,
    variables: b || {}
  };
}

function B(a, b) {
  return g({}, a, {
    context: g({}, a.context, {
      meta: g({}, a.context.meta, b)
    })
  });
}

function D(a, b, c) {
  return {
    operation: a,
    data: b.data,
    error: Array.isArray(b.errors) ? new t({
      graphQLErrors: b.errors,
      response: c
    }) : void 0,
    extensions: "object" == typeof b.extensions && b.extensions || void 0
  };
}

function E(a, b, c) {
  return {
    operation: a,
    data: void 0,
    error: new t({
      networkError: b,
      response: c
    }),
    extensions: void 0
  };
}

function F(a, b) {
  void 0 === b && (b = []);
  if (Array.isArray(a)) {
    a.forEach((function c(a) {
      F(a, b);
    }));
  } else if ("object" == typeof a && null !== a) {
    for (var d in a) {
      "__typename" === d && "string" == typeof a[d] ? b.push(a[d]) : F(a[d], b);
    }
  }
  return b;
}

function G(a, b, c) {
  return c.indexOf(a) === b;
}

function H(a) {
  return a.kind === Kind.FIELD && "__typename" === a.name.value;
}

function I(a) {
  if (a.selectionSet && !a.selectionSet.selections.some(H)) {
    return a.selectionSet.selections.push({
      kind: Kind.FIELD,
      name: {
        kind: Kind.NAME,
        value: "__typename"
      }
    }), a;
  }
}

function J(a) {
  return visit(a, {
    Field: I,
    InlineFragment: I
  });
}

function L(a) {
  return a && "object" == typeof a ? Object.keys(a).reduce((function(b, c) {
    var d = a[c];
    "__typename" === c ? Object.defineProperty(b, "__typename", {
      enumerable: !1,
      value: d
    }) : Array.isArray(d) ? b[c] = d.map(L) : b[c] = d && "object" == typeof d && "__typename" in d ? L(d) : d;
    return b;
  }), {}) : a;
}

function M(a) {
  a.toPromise = function() {
    return toPromise(take(1)(a));
  };
  return a;
}

function N(a) {
  return "subscription" !== (a = a.operationName) && "query" !== a;
}

function O(a) {
  return a.path || a.extensions ? {
    message: a.message,
    path: a.path,
    extensions: a.extensions
  } : a.message;
}

function P(a) {
  return "mutation" !== (a = a.operationName) && "query" !== a;
}

function Q(a) {
  return g({}, a, {
    query: J(a.query)
  });
}

function R(a) {
  return "query" !== a.operationName || "cache-only" !== a.context.requestPolicy;
}

function aa(a) {
  return B(a, {
    cacheOutcome: "miss"
  });
}

function ba(a) {
  return P(a);
}

function S(a) {
  function b(a) {
    var c = a.context.requestPolicy;
    return "query" === a.operationName && "network-only" !== c && ("cache-only" === c || h.has(a.key));
  }
  function c(a) {
    var b = h.get(a.key);
    b = g({}, b, {
      operation: B(a, {
        cacheOutcome: b ? "hit" : "miss"
      })
    });
    "cache-and-network" === a.context.requestPolicy && (b.stale = !0, T(m, a));
    return b;
  }
  function d(a) {
    return !P(a) && b(a);
  }
  function e(a) {
    a.operation && "mutation" === a.operation.operationName ? k(a) : a.operation && "query" === a.operation.operationName && C(a);
  }
  function f(a) {
    return !P(a) && !b(a);
  }
  var l = a.forward, m = a.client, h = new Map;
  a = Object.create(null);
  var k = function ca(a, b, c) {
    function d(b) {
      if (a.has(b)) {
        var f = a.get(b).operation;
        a.delete(b);
        T(c, f);
      }
    }
    return function(a) {
      function c(a) {
        e.add(a);
      }
      var e = new Set, m = a.operation.context.additionalTypenames;
      F(a.data).filter(G).concat(m || []).forEach((function(a) {
        (a = b[a] || (b[a] = new Set)).forEach(c);
        a.clear();
      }));
      e.forEach(d);
    };
  }(h, a, m), C = function da(a, b) {
    return function(c) {
      var d = c.operation, e = c.data, f = d.context.additionalTypenames;
      null != e && (a.set(d.key, {
        operation: d,
        data: e,
        error: c.error
      }), F(c.data).filter(G).concat(f || []).forEach((function(a) {
        (b[a] || (b[a] = new Set)).add(d.key);
      })));
    };
  }(h, a);
  return function(a) {
    var b = share(a);
    a = map(c)(filter(d)(b));
    b = tap(e)(l(filter(R)(map(aa)(merge([ map(Q)(filter(f)(b)), filter(ba)(b) ])))));
    return merge([ a, b ]);
  };
}

function T(a, b) {
  return a.reexecuteOperation(g({}, b, {
    context: g({}, b.context, {
      requestPolicy: "network-only"
    })
  }));
}

function ea(a) {
  return console.log("[Exchange debug]: Completed operation: ", a);
}

function fa(a) {
  return console.log("[Exchange debug]: Incoming operation: ", a);
}

function U(a) {
  function b(a) {
    e.delete(a.operation.key);
  }
  function c(a) {
    var b = a.key;
    if ("teardown" === (a = a.operationName)) {
      return e.delete(b), !0;
    }
    if ("query" !== a && "subscription" !== a) {
      return !0;
    }
    a = e.has(b);
    e.add(b);
    return !a;
  }
  var d = a.forward, e = new Set;
  return function(a) {
    a = filter(c)(a);
    return tap(b)(d(a));
  };
}

function ha(a) {
  return "query" === a.operationName || "mutation" === a.operationName;
}

function ia(a) {
  return "query" !== a.operationName && "mutation" !== a.operationName;
}

function V(a) {
  var b = a.forward;
  return function(a) {
    var c = share(a);
    a = mergeMap((function(a) {
      var b = a.key, f = filter((function(a) {
        return "teardown" === a.operationName && a.key === b;
      }))(c);
      return takeUntil(f)(function ja(a, b) {
        if ("production" !== process.env.NODE_ENV && "subscription" === a.operationName) {
          throw Error("Received a subscription operation in the httpExchange. You are probably trying to create a subscription. Have you added a subscriptionExchange?");
        }
        return make((function(c) {
          var d = c.next, e = c.complete, f = "undefined" != typeof AbortController ? new AbortController : void 0;
          c = "function" == typeof (c = a.context).fetchOptions ? c.fetchOptions() : c.fetchOptions || {};
          var l = function la(a) {
            return (a = a.definitions.find(ka)) ? a.name.value : null;
          }(a.query), m = {
            query: print(a.query),
            variables: a.variables
          };
          null !== l && (m.operationName = l);
          var h = g({}, c, {
            body: b ? void 0 : JSON.stringify(m),
            method: b ? "GET" : "POST",
            headers: g({}, {
              "content-type": "application/json"
            }, c.headers),
            signal: void 0 !== f ? f.signal : void 0
          });
          b && (a.context.url = function ma(a, b) {
            var c = [ "query=" + encodeURIComponent(b.query) ];
            b.variables && c.push("variables=" + encodeURIComponent(JSON.stringify(b.variables)));
            return a + "?" + c.join("&");
          }(a.context.url, m));
          var k = !1;
          Promise.resolve().then((function() {
            return k ? void 0 : function na(a, b) {
              var e, c = a.context, d = !1;
              return (c.fetch || fetch)(c.url, b).then((function(a) {
                e = a;
                d = 200 > a.status || a.status >= ("manual" === b.redirect ? 400 : 300);
                return a.json();
              })).then((function(b) {
                if (!("data" in b) && !("errors" in b)) {
                  throw Error("No Content");
                }
                return D(a, b, e);
              })).catch((function(b) {
                if ("AbortError" !== b.name) {
                  return E(a, d ? Error(e.statusText) : b, e);
                }
              }));
            }(a, h);
          })).then((function(a) {
            k || (k = !0, a && d(a), e());
          }));
          return function() {
            k = !0;
            void 0 !== f && f.abort();
          };
        }));
      }(a, "query" === a.operationName && !!a.context.preferGetMethod));
    }))(filter(ha)(c));
    var e = b(filter(ia)(c));
    return merge([ a, e ]);
  };
}

function ka(a) {
  return a.kind === Kind.OPERATION_DEFINITION && a.name;
}

function oa() {
  return !1;
}

function pa(a) {
  "teardown" !== (a = a.operationName) && "production" !== process.env.NODE_ENV && console.warn('No exchange has handled operations of type "' + a + "\". Check whether you've added an exchange responsible for these operations.");
}

function W(a) {
  return filter(oa)(tap(pa)(a));
}

function X(a) {
  return 1 === a.length ? a[0] : function(b) {
    return a.reduceRight((function(a, d) {
      return d({
        client: b.client,
        forward: a
      });
    }), b.forward);
  };
}

var Y = [ U, S, V ];

function Z(a) {
  var b = this;
  this.activeOperations = Object.create(null);
  this.queue = [];
  this.createOperationContext = function(a) {
    return g({}, {
      url: b.url,
      fetchOptions: b.fetchOptions,
      fetch: b.fetch,
      preferGetMethod: b.preferGetMethod
    }, a, {
      requestPolicy: (a || {}).requestPolicy || b.requestPolicy
    });
  };
  this.createRequestOperation = function(a, c, d) {
    return {
      key: c.key,
      query: c.query,
      variables: c.variables,
      operationName: a,
      context: b.createOperationContext(d)
    };
  };
  this.reexecuteOperation = function(a) {
    0 < (b.activeOperations[a.key] || 0) && (b.queue.push(a), b.dispatchOperation());
  };
  this.executeQuery = function(a, c) {
    a = b.createRequestOperation("query", a, c);
    var e = b.executeRequestOperation(a);
    return (a = a.context.pollInterval) ? switchMap((function d() {
      return e;
    }))(merge([ fromValue(0), interval(a) ])) : e;
  };
  this.executeSubscription = function(a, c) {
    a = b.createRequestOperation("subscription", a, c);
    return b.executeRequestOperation(a);
  };
  this.executeMutation = function(a, c) {
    a = b.createRequestOperation("mutation", a, c);
    return b.executeRequestOperation(a);
  };
  if ("production" !== process.env.NODE_ENV && !a.url) {
    throw Error("You are creating an urql-client without a url.");
  }
  this.url = a.url;
  this.fetchOptions = a.fetchOptions;
  this.fetch = a.fetch;
  this.suspense = !!a.suspense;
  this.requestPolicy = a.requestPolicy || "cache-first";
  this.preferGetMethod = !!a.preferGetMethod;
  this.maskTypename = !!a.maskTypename;
  var c = makeSubject(), d = c.next;
  this.operations$ = c.source;
  var e = !1;
  this.dispatchOperation = function(a) {
    if (e) {
      a && d(a);
    } else {
      e = !0;
      for (a && d(a); a = b.queue.shift(); ) {
        d(a);
      }
      e = !1;
    }
  };
  a = X(void 0 !== a.exchanges ? a.exchanges : Y);
  this.results$ = share(a({
    client: this,
    forward: W
  })(this.operations$));
  publish(this.results$);
}

Z.prototype.onOperationStart = function(a) {
  var b = a.key;
  this.activeOperations[b] = (this.activeOperations[b] || 0) + 1;
  this.dispatchOperation(a);
};

Z.prototype.onOperationEnd = function(a) {
  var b = a.key, c = this.activeOperations[b] || 0;
  0 >= (this.activeOperations[b] = 0 >= c ? 0 : c - 1) && this.dispatchOperation(g({}, a, {
    operationName: "teardown"
  }));
};

function qa(a) {
  a.data = L(a.data);
  return a;
}

Z.prototype.executeRequestOperation = function(a) {
  var c = this, d = a.key, e = a.operationName, f = filter((function(a) {
    return a.operation.key === d;
  }))(this.results$);
  this.maskTypename && (f = map(qa)(f));
  if ("mutation" === e) {
    return take(1)(onStart((function b() {
      return c.dispatchOperation(a);
    }))(f));
  }
  var l = filter((function(a) {
    return "teardown" === a.operationName && a.key === d;
  }))(this.operations$);
  f = onEnd((function() {
    c.onOperationEnd(a);
  }))(onStart((function() {
    c.onOperationStart(a);
  }))(takeUntil(l)(f)));
  return !1 !== a.context.suspense && this.suspense && "query" === e ? function K(a) {
    return function(b) {
      var c = share(a), d = !1, e = !1;
      onPush((function() {
        return d = !0;
      }))(takeWhile((function() {
        return !e;
      }))(c))(b);
      if (!d) {
        throw e = !0, b(0), toPromise(take(1)(c));
      }
    };
  }(f) : f;
};

Z.prototype.query = function(a, b, c) {
  c && "boolean" == typeof c.suspense || (c = g({}, c, {
    suspense: !1
  }));
  return M(this.executeQuery(A(a, b), c));
};

Z.prototype.readQuery = function(a, b, c) {
  var d = null;
  subscribe((function(a) {
    d = a;
  }))(this.executeQuery(A(a, b), c)).unsubscribe();
  return d;
};

Z.prototype.mutation = function(a, b, c) {
  return M(this.executeMutation(A(a, b), c));
};

function createClient(a) {
  return new Z(a);
}

function debugExchange(a) {
  var d = a.forward;
  return "production" === process.env.NODE_ENV ? function b(a) {
    return d(a);
  } : function c(a) {
    return tap(ea)(d(tap(fa)(a)));
  };
}

function ssrExchange(a) {
  function b(b) {
    var c = b.client, k = b.forward;
    return function(b) {
      var C = a && "boolean" == typeof a.isClient ? !!a.isClient : !c.suspense, n = share(b);
      b = k(filter(d)(n));
      n = map(e)(filter(f)(n));
      C ? n = tap(m)(n) : b = tap(l)(b);
      return merge([ b, n ]);
    };
  }
  function c(a) {
    return !N(a) && void 0 !== h[a.key];
  }
  function d(a) {
    return !c(a);
  }
  function e(a) {
    var b = h[a.key], c = b.error;
    return {
      operation: a,
      data: b.data,
      extensions: void 0,
      error: c ? new t({
        networkError: c.networkError ? Error(c.networkError) : void 0,
        graphQLErrors: c.graphQLErrors && c.graphQLErrors.length ? c.graphQLErrors : void 0
      }) : void 0
    };
  }
  function f(a) {
    return c(a);
  }
  function l(a) {
    var b = a.operation;
    if (!N(b)) {
      var c = a.error;
      a = {
        data: a.data,
        error: void 0
      };
      c && (a.error = {
        graphQLErrors: c.graphQLErrors.map(O),
        networkError: c.networkError ? "" + c.networkError : void 0
      });
      h[b.key] = a;
    }
  }
  function m(a) {
    delete h[a.operation.key];
  }
  var h = {};
  b.restoreData = function(a) {
    return g(h, a);
  };
  b.extractData = function() {
    return g({}, h);
  };
  a && a.initialState && b.restoreData(a.initialState);
  return b;
}

function subscriptionExchange(a) {
  function b(a) {
    return "subscription" === (a = a.operationName) || !!d && ("query" === a || "mutation" === a);
  }
  var c = a.forwardSubscription, d = a.enableAllOperations;
  return function(a) {
    function d(a) {
      var b = c({
        key: a.key.toString(36),
        query: print(a.query),
        variables: a.variables,
        context: g({}, a.context)
      });
      return make((function(c) {
        function d(b) {
          return h(D(a, b));
        }
        function e(b) {
          return h(E(a, b));
        }
        function f() {
          k || (k = !0, "subscription" === a.operationName && m.reexecuteOperation(g({}, a, {
            operationName: "teardown"
          })), l());
        }
        var n, h = c.next, l = c.complete, k = !1;
        Promise.resolve().then((function() {
          k || (n = b.subscribe({
            next: d,
            error: e,
            complete: f
          }));
        }));
        return function() {
          k = !0;
          n && n.unsubscribe();
        };
      }));
    }
    function e(a) {
      return !k(a);
    }
    var m = a.client, h = a.forward, k = b;
    return function(a) {
      var b = share(a);
      a = mergeMap((function(a) {
        var c = a.key, e = filter((function(a) {
          return "teardown" === a.operationName && a.key === c;
        }))(b);
        return takeUntil(e)(d(a));
      }))(filter(k)(b));
      var c = h(filter(e)(b));
      return merge([ a, c ]);
    };
  };
}

export { Z as Client, t as CombinedError, S as cacheExchange, X as composeExchanges, createClient, A as createRequest, debugExchange, U as dedupExchange, Y as defaultExchanges, W as fallbackExchangeIO, V as fetchExchange, J as formatDocument, E as makeErrorResult, D as makeResult, L as maskTypename, ssrExchange, y as stringifyVariables, subscriptionExchange };
//# sourceMappingURL=urql-core.mjs.map
