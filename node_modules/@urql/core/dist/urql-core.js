"use strict";

var wonka = require("wonka"), GraphQLError = require("graphql/error/GraphQLError"), parser = require("graphql/language/parser"), printer = require("graphql/language/printer"), kinds = require("graphql/language/kinds"), visitor = require("graphql/language/visitor");

function _extends() {
  return (_extends = Object.assign || function(a) {
    for (var b = 1; b < arguments.length; b++) {
      var d, c = arguments[b];
      for (d in c) {
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
      }
    }
    return a;
  }).apply(this, arguments);
}

var rehydrateGraphQlError = function(a) {
  return "string" == typeof a ? new GraphQLError.GraphQLError(a) : "object" == typeof a && a.message ? new GraphQLError.GraphQLError(a.message, a.nodes, a.source, a.positions, a.path, a, a.extensions || {}) : a;
};

function _toString() {
  return this.message;
}

var CombinedError = function(a) {
  function b(b) {
    var c = b.networkError, e = b.response;
    var f = function(a, b) {
      var d = "";
      if (void 0 !== a) {
        return d = "[Network] " + a.message;
      }
      void 0 !== b && b.forEach((function c(a) {
        d += "[GraphQL] " + a.message + "\n";
      }));
      return d.trim();
    }(c, b = (b.graphQLErrors || []).map(rehydrateGraphQlError));
    a.call(this, f);
    this.name = "CombinedError";
    this.message = f;
    this.graphQLErrors = b;
    this.networkError = c;
    this.response = e;
  }
  a && (b.__proto__ = a);
  (b.prototype = Object.create(a && a.prototype)).constructor = b;
  b.prototype.toString = _toString;
  return b;
}(Error), phash = function(a, b) {
  a |= 0;
  for (var c = 0, d = 0 | b.length; c < d; c++) {
    a = (a << 5) + a + b.charCodeAt(c);
  }
  return a;
}, seen = new Set, cache = new WeakMap, stringify = function(a) {
  if (null === a || seen.has(a)) {
    return "null";
  }
  if ("object" != typeof a) {
    return JSON.stringify(a) || "";
  }
  if (a.toJSON) {
    return a.toJSON();
  }
  if (Array.isArray(a)) {
    for (var b = "[", c = 0, d = a.length; c < d; c++) {
      0 < c && (b += ",");
      var e = stringify(a[c]);
      b += 0 < e.length ? e : "null";
    }
    return b + "]";
  }
  if (!(b = Object.keys(a).sort()).length && a.constructor && a.constructor !== Object) {
    return b = cache.get(a) || Math.random().toString(36).slice(2), cache.set(a, b), 
    '{"__key":"' + b + '"}';
  }
  seen.add(a);
  c = "{";
  d = 0;
  for (e = b.length; d < e; d++) {
    var f = b[d], g = stringify(a[f]);
    g && (1 < c.length && (c += ","), c += stringify(f) + ":" + g);
  }
  seen.delete(a);
  return c + "}";
}, stringifyVariables = function(a) {
  seen.clear();
  return stringify(a);
}, hashQuery = function(a) {
  return function(a) {
    return phash(5381, a) >>> 0;
  }(a.replace(/[\s,]+/g, " ").trim());
}, docs = Object.create(null), createRequest = function(a, b) {
  if ("string" == typeof a) {
    var c = hashQuery(a);
    a = void 0 !== docs[c] ? docs[c] : parser.parse(a);
  } else {
    void 0 !== a.__key ? c = a.__key : (c = hashQuery(printer.print(a)), a = void 0 !== docs[c] ? docs[c] : a);
  }
  docs[c] = a;
  a.__key = c;
  return {
    key: b ? phash(c, stringifyVariables(b)) >>> 0 : c,
    query: a,
    variables: b || {}
  };
}, addMetadata = function(a, b) {
  return _extends({}, a, {
    context: _extends({}, a.context, {
      meta: _extends({}, a.context.meta, b)
    })
  });
}, makeResult = function(a, b, c) {
  return {
    operation: a,
    data: b.data,
    error: Array.isArray(b.errors) ? new CombinedError({
      graphQLErrors: b.errors,
      response: c
    }) : void 0,
    extensions: "object" == typeof b.extensions && b.extensions || void 0
  };
}, makeErrorResult = function(a, b, c) {
  return {
    operation: a,
    data: void 0,
    error: new CombinedError({
      networkError: b,
      response: c
    }),
    extensions: void 0
  };
}, collectTypes = function(a, b) {
  void 0 === b && (b = []);
  if (Array.isArray(a)) {
    a.forEach((function c(a) {
      collectTypes(a, b);
    }));
  } else if ("object" == typeof a && null !== a) {
    for (var d in a) {
      "__typename" === d && "string" == typeof a[d] ? b.push(a[d]) : collectTypes(a[d], b);
    }
  }
  return b;
};

function _ref2(a, b, c) {
  return c.indexOf(a) === b;
}

var collectTypesFromResponse = function(a) {
  return collectTypes(a).filter(_ref2);
};

function _ref3(a) {
  return a.kind === kinds.Kind.FIELD && "__typename" === a.name.value;
}

var formatNode = function(a) {
  if (a.selectionSet && !a.selectionSet.selections.some(_ref3)) {
    return a.selectionSet.selections.push({
      kind: kinds.Kind.FIELD,
      name: {
        kind: kinds.Kind.NAME,
        value: "__typename"
      }
    }), a;
  }
}, formatDocument = function(a) {
  return visitor.visit(a, {
    Field: formatNode,
    InlineFragment: formatNode
  });
}, maskTypename = function(a) {
  return a && "object" == typeof a ? Object.keys(a).reduce((function(b, c) {
    var d = a[c];
    "__typename" === c ? Object.defineProperty(b, "__typename", {
      enumerable: !1,
      value: d
    }) : Array.isArray(d) ? b[c] = d.map(maskTypename) : b[c] = d && "object" == typeof d && "__typename" in d ? maskTypename(d) : d;
    return b;
  }), {}) : a;
};

function withPromise(a) {
  a.toPromise = function() {
    return wonka.toPromise(wonka.take(1)(a));
  };
  return a;
}

var shouldSkip = function(a) {
  return "subscription" !== (a = a.operationName) && "query" !== a;
};

function _ref(a) {
  return a.path || a.extensions ? {
    message: a.message,
    path: a.path,
    extensions: a.extensions
  } : a.message;
}

var shouldSkip$1 = function(a) {
  return "mutation" !== (a = a.operationName) && "query" !== a;
};

function _ref$1(a) {
  return _extends({}, a, {
    query: formatDocument(a.query)
  });
}

function _ref5(a) {
  return "query" !== a.operationName || "cache-only" !== a.context.requestPolicy;
}

function _ref6(a) {
  return addMetadata(a, {
    cacheOutcome: "miss"
  });
}

function _ref8(a) {
  return shouldSkip$1(a);
}

var cacheExchange = function(a) {
  function b(a) {
    var b = h.get(a.key);
    b = _extends({}, b, {
      operation: addMetadata(a, {
        cacheOutcome: b ? "hit" : "miss"
      })
    });
    "cache-and-network" === a.context.requestPolicy && (b.stale = !0, reexecuteOperation(g, a));
    return b;
  }
  function c(a) {
    return !shouldSkip$1(a) && n(a);
  }
  function d(a) {
    a.operation && "mutation" === a.operation.operationName ? l(a) : a.operation && "query" === a.operation.operationName && m(a);
  }
  function e(a) {
    return !shouldSkip$1(a) && !n(a);
  }
  var f = a.forward, g = a.client, h = new Map;
  a = Object.create(null);
  var k = _ref$1, l = afterMutation(h, a, g), m = afterQuery(h, a), n = function(a) {
    var c = a.context.requestPolicy;
    return "query" === a.operationName && "network-only" !== c && ("cache-only" === c || h.has(a.key));
  };
  return function(a) {
    var g = wonka.share(a);
    a = wonka.map(b)(wonka.filter(c)(g));
    g = wonka.tap(d)(f(wonka.filter(_ref5)(wonka.map(_ref6)(wonka.merge([ wonka.map(k)(wonka.filter(e)(g)), wonka.filter(_ref8)(g) ])))));
    return wonka.merge([ a, g ]);
  };
}, reexecuteOperation = function(a, b) {
  return a.reexecuteOperation(_extends({}, b, {
    context: _extends({}, b.context, {
      requestPolicy: "network-only"
    })
  }));
}, afterMutation = function(a, b, c) {
  function d(b) {
    if (a.has(b)) {
      var f = a.get(b).operation;
      a.delete(b);
      reexecuteOperation(c, f);
    }
  }
  return function(a) {
    function c(a) {
      g.add(a);
    }
    var g = new Set, e = a.operation.context.additionalTypenames;
    collectTypesFromResponse(a.data).concat(e || []).forEach((function(a) {
      (a = b[a] || (b[a] = new Set)).forEach(c);
      a.clear();
    }));
    g.forEach(d);
  };
}, afterQuery = function(a, b) {
  return function(c) {
    var d = c.operation, e = c.data, f = d.context.additionalTypenames;
    null != e && (a.set(d.key, {
      operation: d,
      data: e,
      error: c.error
    }), collectTypesFromResponse(c.data).concat(f || []).forEach((function(a) {
      (b[a] || (b[a] = new Set)).add(d.key);
    })));
  };
};

function _ref2$1(a) {
  return console.log("[Exchange debug]: Completed operation: ", a);
}

function _ref3$1(a) {
  return console.log("[Exchange debug]: Incoming operation: ", a);
}

var dedupExchange = function(a) {
  var b = a.forward, c = new Set, d = function(a) {
    var b = a.key;
    if ("teardown" === (a = a.operationName)) {
      return c.delete(b), !0;
    }
    if ("query" !== a && "subscription" !== a) {
      return !0;
    }
    a = c.has(b);
    c.add(b);
    return !a;
  }, e = function(a) {
    c.delete(a.operation.key);
  };
  return function(a) {
    a = wonka.filter(d)(a);
    return wonka.tap(e)(b(a));
  };
};

function _ref$2(a) {
  return "query" === a.operationName || "mutation" === a.operationName;
}

function _ref2$2(a) {
  return "query" !== a.operationName && "mutation" !== a.operationName;
}

var fetchExchange = function(a) {
  var b = a.forward;
  return function(a) {
    var c = wonka.share(a);
    a = wonka.mergeMap((function(a) {
      var b = a.key, f = wonka.filter((function(a) {
        return "teardown" === a.operationName && a.key === b;
      }))(c);
      return wonka.takeUntil(f)(createFetchSource(a, "query" === a.operationName && !!a.context.preferGetMethod));
    }))(wonka.filter(_ref$2)(c));
    var e = b(wonka.filter(_ref2$2)(c));
    return wonka.merge([ a, e ]);
  };
};

function _ref3$2(a) {
  return a.kind === kinds.Kind.OPERATION_DEFINITION && a.name;
}

var createFetchSource = function(a, b) {
  if ("production" !== process.env.NODE_ENV && "subscription" === a.operationName) {
    throw Error("Received a subscription operation in the httpExchange. You are probably trying to create a subscription. Have you added a subscriptionExchange?");
  }
  return wonka.make((function(c) {
    var d = c.next, e = c.complete, f = "undefined" != typeof AbortController ? new AbortController : void 0;
    c = "function" == typeof (c = a.context).fetchOptions ? c.fetchOptions() : c.fetchOptions || {};
    var g = function(a) {
      return (a = a.definitions.find(_ref3$2)) ? a.name.value : null;
    }(a.query), h = {
      query: printer.print(a.query),
      variables: a.variables
    };
    null !== g && (h.operationName = g);
    var k = _extends({}, c, {
      body: b ? void 0 : JSON.stringify(h),
      method: b ? "GET" : "POST",
      headers: _extends({}, {
        "content-type": "application/json"
      }, c.headers),
      signal: void 0 !== f ? f.signal : void 0
    });
    b && (a.context.url = convertToGet(a.context.url, h));
    var l = !1;
    Promise.resolve().then((function() {
      return l ? void 0 : executeFetch(a, k);
    })).then((function(a) {
      l || (l = !0, a && d(a), e());
    }));
    return function() {
      l = !0;
      void 0 !== f && f.abort();
    };
  }));
}, executeFetch = function(a, b) {
  var e, c = a.context, d = !1;
  return (c.fetch || fetch)(c.url, b).then((function(a) {
    e = a;
    d = 200 > a.status || a.status >= ("manual" === b.redirect ? 400 : 300);
    return a.json();
  })).then((function(b) {
    if (!("data" in b) && !("errors" in b)) {
      throw Error("No Content");
    }
    return makeResult(a, b, e);
  })).catch((function(b) {
    if ("AbortError" !== b.name) {
      return makeErrorResult(a, d ? Error(e.statusText) : b, e);
    }
  }));
}, convertToGet = function(a, b) {
  var c = [ "query=" + encodeURIComponent(b.query) ];
  b.variables && c.push("variables=" + encodeURIComponent(JSON.stringify(b.variables)));
  return a + "?" + c.join("&");
};

function _ref$3() {
  return !1;
}

function _ref2$3(a) {
  "teardown" !== (a = a.operationName) && "production" !== process.env.NODE_ENV && console.warn('No exchange has handled operations of type "' + a + "\". Check whether you've added an exchange responsible for these operations.");
}

var fallbackExchangeIO = function(a) {
  return wonka.filter(_ref$3)(wonka.tap(_ref2$3)(a));
}, composeExchanges = function(a) {
  return 1 === a.length ? a[0] : function(b) {
    return a.reduceRight((function(a, d) {
      return d({
        client: b.client,
        forward: a
      });
    }), b.forward);
  };
}, defaultExchanges = [ dedupExchange, cacheExchange, fetchExchange ], Client = function(a) {
  var b = this;
  this.activeOperations = Object.create(null);
  this.queue = [];
  this.createOperationContext = function(a) {
    return _extends({}, {
      url: b.url,
      fetchOptions: b.fetchOptions,
      fetch: b.fetch,
      preferGetMethod: b.preferGetMethod
    }, a, {
      requestPolicy: (a || {}).requestPolicy || b.requestPolicy
    });
  };
  this.createRequestOperation = function(a, c, d) {
    return {
      key: c.key,
      query: c.query,
      variables: c.variables,
      operationName: a,
      context: b.createOperationContext(d)
    };
  };
  this.reexecuteOperation = function(a) {
    0 < (b.activeOperations[a.key] || 0) && (b.queue.push(a), b.dispatchOperation());
  };
  this.executeQuery = function(a, c) {
    a = b.createRequestOperation("query", a, c);
    var f = b.executeRequestOperation(a);
    return (a = a.context.pollInterval) ? wonka.switchMap((function d() {
      return f;
    }))(wonka.merge([ wonka.fromValue(0), wonka.interval(a) ])) : f;
  };
  this.executeSubscription = function(a, c) {
    a = b.createRequestOperation("subscription", a, c);
    return b.executeRequestOperation(a);
  };
  this.executeMutation = function(a, c) {
    a = b.createRequestOperation("mutation", a, c);
    return b.executeRequestOperation(a);
  };
  if ("production" !== process.env.NODE_ENV && !a.url) {
    throw Error("You are creating an urql-client without a url.");
  }
  this.url = a.url;
  this.fetchOptions = a.fetchOptions;
  this.fetch = a.fetch;
  this.suspense = !!a.suspense;
  this.requestPolicy = a.requestPolicy || "cache-first";
  this.preferGetMethod = !!a.preferGetMethod;
  this.maskTypename = !!a.maskTypename;
  var c = wonka.makeSubject(), d = c.next;
  this.operations$ = c.source;
  var e = !1;
  this.dispatchOperation = function(a) {
    if (e) {
      a && d(a);
    } else {
      e = !0;
      for (a && d(a); a = b.queue.shift(); ) {
        d(a);
      }
      e = !1;
    }
  };
  a = composeExchanges(void 0 !== a.exchanges ? a.exchanges : defaultExchanges);
  this.results$ = wonka.share(a({
    client: this,
    forward: fallbackExchangeIO
  })(this.operations$));
  wonka.publish(this.results$);
};

Client.prototype.onOperationStart = function(a) {
  var b = a.key;
  this.activeOperations[b] = (this.activeOperations[b] || 0) + 1;
  this.dispatchOperation(a);
};

Client.prototype.onOperationEnd = function(a) {
  var b = a.key, c = this.activeOperations[b] || 0;
  0 >= (this.activeOperations[b] = 0 >= c ? 0 : c - 1) && this.dispatchOperation(_extends({}, a, {
    operationName: "teardown"
  }));
};

function _ref2$4(a) {
  a.data = maskTypename(a.data);
  return a;
}

Client.prototype.executeRequestOperation = function(a) {
  var c = this, d = a.key, e = a.operationName, f = wonka.filter((function(a) {
    return a.operation.key === d;
  }))(this.results$);
  this.maskTypename && (f = wonka.map(_ref2$4)(f));
  if ("mutation" === e) {
    return wonka.take(1)(wonka.onStart((function b() {
      return c.dispatchOperation(a);
    }))(f));
  }
  var g = wonka.filter((function(a) {
    return "teardown" === a.operationName && a.key === d;
  }))(this.operations$);
  f = wonka.onEnd((function() {
    c.onOperationEnd(a);
  }))(wonka.onStart((function() {
    c.onOperationStart(a);
  }))(wonka.takeUntil(g)(f)));
  return !1 !== a.context.suspense && this.suspense && "query" === e ? function(a) {
    return function(b) {
      var c = wonka.share(a), d = !1, e = !1;
      wonka.onPush((function() {
        return d = !0;
      }))(wonka.takeWhile((function() {
        return !e;
      }))(c))(b);
      if (!d) {
        throw e = !0, b(0), wonka.toPromise(wonka.take(1)(c));
      }
    };
  }(f) : f;
};

Client.prototype.query = function(a, b, c) {
  c && "boolean" == typeof c.suspense || (c = _extends({}, c, {
    suspense: !1
  }));
  return withPromise(this.executeQuery(createRequest(a, b), c));
};

Client.prototype.readQuery = function(a, b, c) {
  var d = null;
  wonka.subscribe((function(a) {
    d = a;
  }))(this.executeQuery(createRequest(a, b), c)).unsubscribe();
  return d;
};

Client.prototype.mutation = function(a, b, c) {
  return withPromise(this.executeMutation(createRequest(a, b), c));
};

exports.Client = Client;

exports.CombinedError = CombinedError;

exports.cacheExchange = cacheExchange;

exports.composeExchanges = composeExchanges;

exports.createClient = function(a) {
  return new Client(a);
};

exports.createRequest = createRequest;

exports.debugExchange = function(a) {
  var d = a.forward;
  return "production" === process.env.NODE_ENV ? function b(a) {
    return d(a);
  } : function c(a) {
    return wonka.tap(_ref2$1)(d(wonka.tap(_ref3$1)(a)));
  };
};

exports.dedupExchange = dedupExchange;

exports.defaultExchanges = defaultExchanges;

exports.fallbackExchangeIO = fallbackExchangeIO;

exports.fetchExchange = fetchExchange;

exports.formatDocument = formatDocument;

exports.makeErrorResult = makeErrorResult;

exports.makeResult = makeResult;

exports.maskTypename = maskTypename;

exports.ssrExchange = function(a) {
  function b(a) {
    return !h(a);
  }
  function c(a) {
    return function(a, b) {
      var c = b.error;
      return {
        operation: a,
        data: b.data,
        extensions: void 0,
        error: c ? new CombinedError({
          networkError: c.networkError ? Error(c.networkError) : void 0,
          graphQLErrors: c.graphQLErrors && c.graphQLErrors.length ? c.graphQLErrors : void 0
        }) : void 0
      };
    }(a, g[a.key]);
  }
  function d(a) {
    return h(a);
  }
  function e(a) {
    var b = a.operation;
    shouldSkip(b) || (a = function(a) {
      var b = a.error;
      a = {
        data: a.data,
        error: void 0
      };
      b && (a.error = {
        graphQLErrors: b.graphQLErrors.map(_ref),
        networkError: b.networkError ? "" + b.networkError : void 0
      });
      return a;
    }(a), g[b.key] = a);
  }
  function f(a) {
    delete g[a.operation.key];
  }
  var g = {}, h = function(a) {
    return !shouldSkip(a) && void 0 !== g[a.key];
  }, k = function(g) {
    var h = g.client, k = g.forward;
    return function(g) {
      var p = a && "boolean" == typeof a.isClient ? !!a.isClient : !h.suspense, m = wonka.share(g);
      g = k(wonka.filter(b)(m));
      m = wonka.map(c)(wonka.filter(d)(m));
      p ? m = wonka.tap(f)(m) : g = wonka.tap(e)(g);
      return wonka.merge([ g, m ]);
    };
  };
  k.restoreData = function(a) {
    return _extends(g, a);
  };
  k.extractData = function() {
    return _extends({}, g);
  };
  a && a.initialState && k.restoreData(a.initialState);
  return k;
};

exports.stringifyVariables = stringifyVariables;

exports.subscriptionExchange = function(a) {
  function b(a) {
    return "subscription" === (a = a.operationName) || !!d && ("query" === a || "mutation" === a);
  }
  var c = a.forwardSubscription, d = a.enableAllOperations;
  return function(a) {
    function f(a) {
      return !l(a);
    }
    var d = a.client, e = a.forward, k = function(a) {
      var b = c({
        key: a.key.toString(36),
        query: printer.print(a.query),
        variables: a.variables,
        context: _extends({}, a.context)
      });
      return wonka.make((function(c) {
        function f(b) {
          return h(makeResult(a, b));
        }
        function g(b) {
          return h(makeErrorResult(a, b));
        }
        function e() {
          m || (m = !0, "subscription" === a.operationName && d.reexecuteOperation(_extends({}, a, {
            operationName: "teardown"
          })), k());
        }
        var l, h = c.next, k = c.complete, m = !1;
        Promise.resolve().then((function() {
          m || (l = b.subscribe({
            next: f,
            error: g,
            complete: e
          }));
        }));
        return function() {
          m = !0;
          l && l.unsubscribe();
        };
      }));
    }, l = b;
    return function(a) {
      var b = wonka.share(a);
      a = wonka.mergeMap((function(a) {
        var c = a.key, f = wonka.filter((function(a) {
          return "teardown" === a.operationName && a.key === c;
        }))(b);
        return wonka.takeUntil(f)(k(a));
      }))(wonka.filter(l)(b));
      var c = e(wonka.filter(f)(b));
      return wonka.merge([ a, c ]);
    };
  };
};
//# sourceMappingURL=urql-core.js.map
