{"version":3,"file":"urql-core.min.mjs","sources":["../src/utils/error.ts","../src/utils/hash.ts","../src/utils/stringifyVariables.ts","../src/utils/request.ts","../src/utils/result.ts","../src/utils/typenames.ts","../src/utils/maskTypename.ts","../src/utils/withPromise.ts","../src/exchanges/ssr.ts","../src/exchanges/cache.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/exchanges/index.ts","../src/client.ts","../src/exchanges/debug.ts","../src/exchanges/subscription.ts","../src/utils/toSuspenseSource.ts"],"sourcesContent":["import { GraphQLError } from 'graphql';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr !== undefined) {\n    return (error = `[Network] ${networkErr.message}`);\n  }\n\n  if (graphQlErrs !== undefined) {\n    graphQlErrs.forEach(err => {\n      error += `[GraphQL] ${err.message}\\n`;\n    });\n  }\n\n  return error.trim();\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (typeof error === 'string') {\n    return new GraphQLError(error);\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return error as any;\n  }\n};\n\n/** An error which can consist of GraphQL errors and Network errors. */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: GraphQLError[];\n  public networkError?: Error;\n  public response?: any;\n\n  constructor({\n    networkError,\n    graphQLErrors,\n    response,\n  }: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | Partial<GraphQLError> | Error>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(networkError, normalizedGraphQLErrors);\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = networkError;\n    this.response = response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n","const seen = new Set();\nconst cache = new WeakMap();\n\nconst stringify = (x: any): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return x.toJSON();\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (let i = 0, l = x.length; i < l; i++) {\n      if (i > 0) out += ',';\n      const value = stringify(x[i]);\n      out += value.length > 0 ? value : 'null';\n    }\n\n    out += ']';\n    return out;\n  }\n\n  const keys = Object.keys(x).sort();\n  if (!keys.length && x.constructor && x.constructor !== Object) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return `{\"__key\":\"${key}\"}`;\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i];\n    const value = stringify(x[key]);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n","import { DocumentNode, parse, print } from 'graphql';\nimport { hash, phash } from './hash';\nimport { stringifyVariables } from './stringifyVariables';\nimport { GraphQLRequest, Operation, OperationContext } from '../types';\n\ninterface Documents {\n  [key: number]: DocumentNode;\n}\n\nconst hashQuery = (q: string): number => hash(q.replace(/[\\s,]+/g, ' ').trim());\n\nconst docs: Documents = Object.create(null);\nconst keyProp = '__key';\n\nexport const createRequest = (\n  q: string | DocumentNode,\n  vars?: object\n): GraphQLRequest => {\n  let key: number;\n  let query: DocumentNode;\n  if (typeof q === 'string') {\n    key = hashQuery(q);\n    query = docs[key] !== undefined ? docs[key] : parse(q);\n  } else if ((q as any)[keyProp] !== undefined) {\n    key = (q as any)[keyProp];\n    query = q;\n  } else {\n    key = hashQuery(print(q));\n    query = docs[key] !== undefined ? docs[key] : q;\n  }\n\n  docs[key] = query;\n  (query as any)[keyProp] = key;\n\n  return {\n    key: vars ? phash(key, stringifyVariables(vars)) >>> 0 : key,\n    query,\n    variables: vars || {},\n  };\n};\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  source: Operation,\n  meta: Exclude<OperationContext['meta'], undefined>\n) => ({\n  ...source,\n  context: {\n    ...source.context,\n    meta: {\n      ...source.context.meta,\n      ...meta,\n    },\n  },\n});\n","import { Operation, OperationResult } from '../types';\nimport { CombinedError } from './error';\n\nexport const makeResult = (\n  operation: Operation,\n  result: any,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: result.data,\n  error: Array.isArray(result.errors)\n    ? new CombinedError({\n        graphQLErrors: result.errors,\n        response,\n      })\n    : undefined,\n  extensions:\n    (typeof result.extensions === 'object' && result.extensions) || undefined,\n});\n\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n});\n","import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  SelectionNode,\n  Kind,\n  visit,\n} from 'graphql';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: string[] = []) => {\n  if (Array.isArray(obj)) {\n    obj.forEach(inner => {\n      collectTypes(inner, types);\n    });\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.push(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object) =>\n  collectTypes(response as EntityLike).filter((v, i, a) => a.indexOf(v) === i);\n\nconst formatNode = (node: FieldNode | InlineFragmentNode) => {\n  if (\n    node.selectionSet &&\n    !node.selectionSet.selections.some(\n      node => node.kind === Kind.FIELD && node.name.value === '__typename'\n    )\n  ) {\n    // NOTE: It's fine to mutate here as long as we return the node,\n    // which will instruct visit() to clone the AST upwards\n    (node.selectionSet.selections as SelectionNode[]).push({\n      kind: Kind.FIELD,\n      name: {\n        kind: Kind.NAME,\n        value: '__typename',\n      },\n    });\n\n    return node;\n  }\n};\n\nexport const formatDocument = (node: DocumentNode) => {\n  return visit(node, {\n    Field: formatNode,\n    InlineFragment: formatNode,\n  });\n};\n","export const maskTypename = (data: any): any => {\n  if (!data || typeof data !== 'object') return data;\n\n  return Object.keys(data).reduce((acc, key: string) => {\n    const value = data[key];\n    if (key === '__typename') {\n      Object.defineProperty(acc, '__typename', {\n        enumerable: false,\n        value,\n      });\n    } else if (Array.isArray(value)) {\n      acc[key] = value.map(maskTypename);\n    } else if (value && typeof value === 'object' && '__typename' in value) {\n      acc[key] = maskTypename(value);\n    } else {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {});\n};\n","import { Source, pipe, toPromise, take } from 'wonka';\nimport { PromisifiedSource } from '../types';\n\nexport function withPromise<T>(source$: Source<T>): PromisifiedSource<T> {\n  (source$ as PromisifiedSource<T>).toPromise = () =>\n    pipe(source$, take(1), toPromise);\n  return source$ as PromisifiedSource<T>;\n}\n","import { GraphQLError } from 'graphql';\nimport { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport interface SerializedResult {\n  data?: any;\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  isClient?: boolean;\n  initialState?: SSRData;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'subscription' && operationName !== 'query';\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = ({\n  data,\n  error,\n}: OperationResult): SerializedResult => {\n  const result: SerializedResult = { data, error: undefined };\n  if (error) {\n    result.error = {\n      graphQLErrors: error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n      networkError: error.networkError ? '' + error.networkError : undefined,\n    };\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult\n): OperationResult => {\n  const { error, data } = result;\n  const deserialized: OperationResult = {\n    operation,\n    data,\n    extensions: undefined,\n    error: error\n      ? new CombinedError({\n          networkError: error.networkError\n            ? new Error(error.networkError)\n            : undefined,\n          graphQLErrors:\n            error.graphQLErrors && error.graphQLErrors.length\n              ? error.graphQLErrors\n              : undefined,\n        })\n      : undefined,\n  };\n\n  return deserialized;\n};\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params?: SSRExchangeParams): SSRExchange => {\n  const data: SSRData = {};\n\n  const isCached = (operation: Operation) => {\n    return !shouldSkip(operation) && data[operation.key] !== undefined;\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    // params.isClient tells us whether we're on the client-side\n    // By default we assume that we're on the client if suspense-mode is disabled\n    const isClient =\n      params && typeof params.isClient === 'boolean'\n        ? !!params.isClient\n        : !client.suspense;\n\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(op => !isCached(op)),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => isCached(op)),\n      map(op => {\n        const serialized = data[op.key];\n        return deserializeResult(op, serialized);\n      })\n    );\n\n    if (!isClient) {\n      // On the server we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (!shouldSkip(operation)) {\n            const serialized = serializeResult(result);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // On the client we delete results from the cache as they're resolved\n      cachedOps$ = pipe(\n        cachedOps$,\n        tap((result: OperationResult) => {\n          delete data[result.operation.key];\n        })\n      );\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => Object.assign(data, restore);\n  ssr.extractData = () => Object.assign({}, data);\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult } from '../types';\nimport {\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\n\ninterface OperationCache {\n  [key: string]: Set<number>;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'mutation' && operationName !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client }) => {\n  const resultCache = new Map() as ResultCache;\n  const operationCache = Object.create(null) as OperationCache;\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => ({\n    ...operation,\n    query: formatDocument(operation.query),\n  });\n\n  const handleAfterMutation = afterMutation(\n    resultCache,\n    operationCache,\n    client\n  );\n\n  const handleAfterQuery = afterQuery(resultCache, operationCache);\n\n  const isOperationCached = operation => {\n    const {\n      key,\n      operationName,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      operationName === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n        const result: OperationResult = {\n          ...cachedResult,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op =>\n          op.operationName !== 'query' ||\n          op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        if (\n          response.operation &&\n          response.operation.operationName === 'mutation'\n        ) {\n          handleAfterMutation(response);\n        } else if (\n          response.operation &&\n          response.operation.operationName === 'query'\n        ) {\n          handleAfterQuery(response);\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nconst reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation({\n    ...operation,\n    context: {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    },\n  });\n};\n\n// Invalidates the cache given a mutation's response\nexport const afterMutation = (\n  resultCache: ResultCache,\n  operationCache: OperationCache,\n  client: Client\n) => (response: OperationResult) => {\n  const pendingOperations = new Set<number>();\n  const { additionalTypenames } = response.operation.context;\n\n  [\n    ...collectTypesFromResponse(response.data),\n    ...(additionalTypenames || []),\n  ].forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.forEach(key => {\n      pendingOperations.add(key);\n    });\n    operations.clear();\n  });\n\n  pendingOperations.forEach(key => {\n    if (resultCache.has(key)) {\n      const operation = (resultCache.get(key) as OperationResult).operation;\n      resultCache.delete(key);\n      reexecuteOperation(client, operation);\n    }\n  });\n};\n\n// Mark typenames on typenameInvalidate for early invalidation\nconst afterQuery = (\n  resultCache: ResultCache,\n  operationCache: OperationCache\n) => (response: OperationResult) => {\n  const { operation, data, error } = response;\n  const { additionalTypenames } = operation.context;\n\n  if (data === undefined || data === null) {\n    return;\n  }\n\n  resultCache.set(operation.key, { operation, data, error });\n\n  [\n    ...collectTypesFromResponse(response.data),\n    ...(additionalTypenames || []),\n  ].forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.add(operation.key);\n  });\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, operationName } = operation;\n    if (operationName === 'teardown') {\n      inFlightKeys.delete(key);\n      return true;\n    } else if (operationName !== 'query' && operationName !== 'subscription') {\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation }: OperationResult) => {\n    inFlightKeys.delete(operation.key);\n  };\n\n  return ops$ => {\n    const forward$ = pipe(ops$, filter(filterIncomingOperation));\n    return pipe(forward(forward$), tap(afterOperationResult));\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { Kind, DocumentNode, OperationDefinitionNode, print } from 'graphql';\nimport { filter, make, merge, mergeMap, pipe, share, takeUntil } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\nimport { makeResult, makeErrorResult } from '../utils';\n\ninterface Body {\n  query: string;\n  variables: void | object;\n  operationName?: string;\n}\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward }) => {\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return (\n          operation.operationName === 'query' ||\n          operation.operationName === 'mutation'\n        );\n      }),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(\n          createFetchSource(\n            operation,\n            operation.operationName === 'query' &&\n              !!operation.context.preferGetMethod\n          ),\n          takeUntil(teardown$)\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return (\n          operation.operationName !== 'query' &&\n          operation.operationName !== 'mutation'\n        );\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n\nconst getOperationName = (query: DocumentNode): string | null => {\n  const node = query.definitions.find(\n    (node: any): node is OperationDefinitionNode => {\n      return node.kind === Kind.OPERATION_DEFINITION && node.name;\n    }\n  );\n\n  return node ? node.name!.value : null;\n};\n\nconst createFetchSource = (operation: Operation, shouldUseGet: boolean) => {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    operation.operationName === 'subscription'\n  ) {\n    throw new Error(\n      'Received a subscription operation in the httpExchange. You are probably trying to create a subscription. Have you added a subscriptionExchange?'\n    );\n  }\n\n  return make<OperationResult>(({ next, complete }) => {\n    const abortController =\n      typeof AbortController !== 'undefined'\n        ? new AbortController()\n        : undefined;\n\n    const { context } = operation;\n\n    const extraOptions =\n      typeof context.fetchOptions === 'function'\n        ? context.fetchOptions()\n        : context.fetchOptions || {};\n\n    const operationName = getOperationName(operation.query);\n\n    const body: Body = {\n      query: print(operation.query),\n      variables: operation.variables,\n    };\n\n    if (operationName !== null) {\n      body.operationName = operationName;\n    }\n\n    const fetchOptions = {\n      ...extraOptions,\n      body: shouldUseGet ? undefined : JSON.stringify(body),\n      method: shouldUseGet ? 'GET' : 'POST',\n      headers: {\n        'content-type': 'application/json',\n        ...extraOptions.headers,\n      },\n      signal:\n        abortController !== undefined ? abortController.signal : undefined,\n    };\n\n    if (shouldUseGet) {\n      operation.context.url = convertToGet(operation.context.url, body);\n    }\n\n    let ended = false;\n\n    Promise.resolve()\n      .then(() => (ended ? undefined : executeFetch(operation, fetchOptions)))\n      .then((result: OperationResult | undefined) => {\n        if (!ended) {\n          ended = true;\n          if (result) next(result);\n          complete();\n        }\n      });\n\n    return () => {\n      ended = true;\n      if (abortController !== undefined) {\n        abortController.abort();\n      }\n    };\n  });\n};\n\nconst executeFetch = (\n  operation: Operation,\n  opts: RequestInit\n): Promise<OperationResult> => {\n  const { url, fetch: fetcher } = operation.context;\n  let statusNotOk = false;\n  let response: Response;\n\n  return (fetcher || fetch)(url, opts)\n    .then((res: Response) => {\n      response = res;\n      statusNotOk =\n        res.status < 200 ||\n        res.status >= (opts.redirect === 'manual' ? 400 : 300);\n      return res.json();\n    })\n    .then((result: any) => {\n      if (!('data' in result) && !('errors' in result)) {\n        throw new Error('No Content');\n      }\n\n      return makeResult(operation, result, response);\n    })\n    .catch((error: Error) => {\n      if (error.name !== 'AbortError') {\n        return makeErrorResult(\n          operation,\n          statusNotOk ? new Error(response.statusText) : error,\n          response\n        );\n      }\n    });\n};\n\nexport const convertToGet = (uri: string, body: Body): string => {\n  const queryParams: string[] = [`query=${encodeURIComponent(body.query)}`];\n\n  if (body.variables) {\n    queryParams.push(\n      `variables=${encodeURIComponent(JSON.stringify(body.variables))}`\n    );\n  }\n\n  return uri + '?' + queryParams.join('&');\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { ExchangeIO, Operation } from '../types';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchangeIO: ExchangeIO = ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(({ operationName }) => {\n      if (\n        operationName !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        console.warn(\n          `No exchange has handled operations of type \"${operationName}\". Check whether you've added an exchange responsible for these operations.`\n        );\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n","import { Exchange } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]): Exchange => {\n  if (exchanges.length === 1) {\n    return exchanges[0];\n  }\n\n  return payload => {\n    return exchanges.reduceRight((forward, exchange) => {\n      return exchange({ client: payload.client, forward });\n    }, payload.forward);\n  };\n};\n","export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport {\n  filter,\n  makeSubject,\n  onEnd,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  merge,\n  interval,\n  fromValue,\n  switchMap,\n  publish,\n  subscribe,\n  map,\n} from 'wonka';\n\nimport {\n  composeExchanges,\n  defaultExchanges,\n  fallbackExchangeIO,\n} from './exchanges';\n\nimport {\n  Exchange,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n  RequestPolicy,\n  PromisifiedSource,\n} from './types';\n\nimport {\n  createRequest,\n  toSuspenseSource,\n  withPromise,\n  maskTypename,\n} from './utils';\n\nimport { DocumentNode } from 'graphql';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An alternative fetch implementation. */\n  fetch?: typeof fetch;\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n  /** The default request policy for requests. */\n  requestPolicy?: RequestPolicy;\n  /** Use HTTP GET for queries. */\n  preferGetMethod?: boolean;\n  /** Mask __typename from results. */\n  maskTypename?: boolean;\n}\n\ninterface ActiveOperations {\n  [operationKey: string]: number;\n}\n\nexport const createClient = (opts: ClientOptions) => new Client(opts);\n\n/** The URQL application-wide client library. Each execute method starts a GraphQL request and returns a stream of results. */\nexport class Client {\n  // These are variables derived from ClientOptions\n  url: string;\n  fetch?: typeof fetch;\n  fetchOptions?: RequestInit | (() => RequestInit);\n  suspense: boolean;\n  preferGetMethod: boolean;\n  requestPolicy: RequestPolicy;\n  maskTypename: boolean;\n\n  // These are internals to be used to keep track of operations\n  dispatchOperation: (operation?: Operation) => void;\n  operations$: Source<Operation>;\n  results$: Source<OperationResult>;\n  activeOperations = Object.create(null) as ActiveOperations;\n  queue: Operation[] = [];\n\n  constructor(opts: ClientOptions) {\n    if (process.env.NODE_ENV !== 'production' && !opts.url) {\n      throw new Error('You are creating an urql-client without a url.');\n    }\n\n    this.url = opts.url;\n    this.fetchOptions = opts.fetchOptions;\n    this.fetch = opts.fetch;\n    this.suspense = !!opts.suspense;\n    this.requestPolicy = opts.requestPolicy || 'cache-first';\n    this.preferGetMethod = !!opts.preferGetMethod;\n    this.maskTypename = !!opts.maskTypename;\n\n    // This subject forms the input of operations; executeOperation may be\n    // called to dispatch a new operation on the subject\n    const { source: operations$, next: nextOperation } = makeSubject<\n      Operation\n    >();\n    this.operations$ = operations$;\n\n    let isDispatching = false;\n    this.dispatchOperation = (operation?: Operation) => {\n      if (!isDispatching) {\n        isDispatching = true;\n        if (operation) nextOperation(operation);\n        let queued: Operation | void;\n        while ((queued = this.queue.shift())) nextOperation(queued);\n        isDispatching = false;\n      } else if (operation) {\n        nextOperation(operation);\n      }\n    };\n\n    const exchanges =\n      opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n    // All exchange are composed into a single one and are called using the constructed client\n    // and the fallback exchange stream\n    const exchange = composeExchanges(exchanges);\n\n    // All operations run through the exchanges in a pipeline-like fashion\n    // and this observable then combines all their results\n    this.results$ = share(\n      exchange({\n        client: this,\n        forward: fallbackExchangeIO,\n      })(this.operations$)\n    );\n\n    // Prevent the `results$` exchange pipeline from being closed by active\n    // cancellations cascading up from components\n    pipe(this.results$, publish);\n  }\n\n  private createOperationContext = (\n    opts?: Partial<OperationContext>\n  ): OperationContext => ({\n    url: this.url,\n    fetchOptions: this.fetchOptions,\n    fetch: this.fetch,\n    preferGetMethod: this.preferGetMethod,\n    ...opts,\n    requestPolicy: (opts || {}).requestPolicy || this.requestPolicy,\n  });\n\n  createRequestOperation = (\n    type: OperationType,\n    request: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Operation => ({\n    key: request.key,\n    query: request.query,\n    variables: request.variables,\n    operationName: type,\n    context: this.createOperationContext(opts),\n  });\n\n  /** Counts up the active operation key and dispatches the operation */\n  private onOperationStart(operation: Operation) {\n    const { key } = operation;\n    this.activeOperations[key] = (this.activeOperations[key] || 0) + 1;\n    this.dispatchOperation(operation);\n  }\n\n  /** Deletes an active operation's result observable and sends a teardown signal through the exchange pipeline */\n  private onOperationEnd(operation: Operation) {\n    const { key } = operation;\n    const prevActive = this.activeOperations[key] || 0;\n    const newActive = (this.activeOperations[key] =\n      prevActive <= 0 ? 0 : prevActive - 1);\n\n    if (newActive <= 0) {\n      this.dispatchOperation({ ...operation, operationName: 'teardown' });\n    }\n  }\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation(operation: Operation): Source<OperationResult> {\n    const { key, operationName } = operation;\n    let operationResults$ = pipe(\n      this.results$,\n      filter((res: OperationResult) => res.operation.key === key)\n    );\n\n    if (this.maskTypename) {\n      operationResults$ = pipe(\n        operationResults$,\n        map(res => {\n          res.data = maskTypename(res.data);\n          return res;\n        })\n      );\n    }\n\n    if (operationName === 'mutation') {\n      // A mutation is always limited to just a single result and is never shared\n      return pipe(\n        operationResults$,\n        onStart<OperationResult>(() => this.dispatchOperation(operation)),\n        take(1)\n      );\n    }\n\n    const teardown$ = pipe(\n      this.operations$,\n      filter(\n        (op: Operation) => op.operationName === 'teardown' && op.key === key\n      )\n    );\n\n    const result$ = pipe(\n      operationResults$,\n      takeUntil(teardown$),\n      onStart<OperationResult>(() => {\n        this.onOperationStart(operation);\n      }),\n      onEnd<OperationResult>(() => {\n        this.onOperationEnd(operation);\n      })\n    );\n\n    return operation.context.suspense !== false &&\n      this.suspense &&\n      operationName === 'query'\n      ? toSuspenseSource<OperationResult>(result$ as Source<OperationResult>)\n      : (result$ as Source<OperationResult>);\n  }\n\n  reexecuteOperation = (operation: Operation) => {\n    // Reexecute operation only if any subscribers are still subscribed to the\n    // operation's exchange results\n    if ((this.activeOperations[operation.key] || 0) > 0) {\n      this.queue.push(operation);\n      this.dispatchOperation();\n    }\n  };\n\n  query<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data>> {\n    if (!context || typeof context.suspense !== 'boolean') {\n      context = { ...context, suspense: false };\n    }\n\n    return withPromise<OperationResult<Data>>(\n      this.executeQuery(createRequest(query, variables), context)\n    );\n  }\n\n  readQuery<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data> | null {\n    let result: OperationResult<Data> | null = null;\n\n    pipe(\n      this.executeQuery(createRequest(query, variables), context),\n      subscribe(res => {\n        result = res;\n      })\n    ).unsubscribe();\n\n    return result;\n  }\n\n  executeQuery = <Data = any>(\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> => {\n    const operation = this.createRequestOperation('query', query, opts);\n    const response$ = this.executeRequestOperation(operation);\n    const { pollInterval } = operation.context;\n\n    if (pollInterval) {\n      return pipe(\n        merge([fromValue(0), interval(pollInterval)]),\n        switchMap(() => response$)\n      );\n    }\n\n    return response$;\n  };\n\n  executeSubscription = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('subscription', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  mutation<Data = any, Variables extends object = {}>(\n    query: DocumentNode | string,\n    variables?: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data>> {\n    return withPromise<OperationResult<Data>>(\n      this.executeMutation(createRequest(query, variables), context)\n    );\n  }\n\n  executeMutation = <Data = any>(\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult<Data>> => {\n    const operation = this.createRequestOperation('mutation', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n}\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n","import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { makeResult, makeErrorResult } from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables?: object;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult & { extensions?: Record<string, any> }>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n\n  /** This flag may be turned on to allow your subscriptions-transport to handle all operation types */\n  enableAllOperations?: boolean;\n}\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n  enableAllOperations,\n}: SubscriptionExchangeOpts): Exchange => ({ client, forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(({ next, complete }) => {\n      let isComplete = false;\n      let sub;\n\n      Promise.resolve().then(() => {\n        if (isComplete) return;\n\n        sub = observableish.subscribe({\n          next: result => next(makeResult(operation, result)),\n          error: err => next(makeErrorResult(operation, err)),\n          complete: () => {\n            if (!isComplete) {\n              isComplete = true;\n              if (operation.operationName === 'subscription') {\n                client.reexecuteOperation({\n                  ...operation,\n                  operationName: 'teardown',\n                });\n              }\n\n              complete();\n            }\n          },\n        });\n      });\n\n      return () => {\n        isComplete = true;\n        if (sub) sub.unsubscribe();\n      };\n    });\n  };\n\n  const isSubscriptionOperation = (operation: Operation): boolean => {\n    const { operationName } = operation;\n    return (\n      operationName === 'subscription' ||\n      (!!enableAllOperations &&\n        (operationName === 'query' || operationName === 'mutation'))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperation),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(createSubscriptionSource(operation), takeUntil(teardown$));\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperation(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n","import { pipe, share, onPush, toPromise, takeWhile, take, Source } from 'wonka';\n\n/** This converts a Source to a suspense Source; It will forward the first result synchronously or throw a promise that resolves when the result becomes available */\nexport const toSuspenseSource = <T>(source: Source<T>): Source<T> => sink => {\n  const shared = share(source);\n  let hasResult = false;\n  let hasSuspended = false;\n\n  pipe(\n    shared,\n    takeWhile(() => !hasSuspended),\n    onPush(() => (hasResult = true))\n  )(sink);\n\n  if (!hasResult) {\n    hasSuspended = true;\n    sink(0); /* End */\n    throw pipe(shared, take(1), toPromise);\n  }\n};\n"],"names":["error","GraphQLError","this","CombinedError","message","networkErr","graphQlErrs","undefined","err","generateErrorMessage","networkError","rehydrateGraphQlError","normalizedGraphQLErrors","response","Error","h","x","i","l","const","seen","Set","cache","WeakMap","JSON","Array","out","value","stringify","Object","key","Math","keys","docs","q","vars","phash","parse","print","query","stringifyVariables","variables","source","meta","_extends","context","operation","result","data","graphQLErrors","extensions","obj","types","inner","collectTypes","v","a","node","Kind","kind","name","visit","Field","formatNode","InlineFragment","acc","enumerable","maskTypename","source$","toPromise","take","operationName","path","formatDocument","op","addMetadata","cacheOutcome","shouldSkip","requestPolicy","resultCache","cachedResult","reexecuteOperation","client","isOperationCached","handleAfterMutation","handleAfterQuery","Map","operationCache","pendingOperations","additionalTypenames","typeName","afterMutation","afterQuery","ops$","sharedOps$","share","map","filter","tap","forward","merge","cachedOps$","forwardedOps$","inFlightKeys","isInFlight","filterIncomingOperation","afterOperationResult","forward$","mergeMap","teardown$","takeUntil","shouldUseGet","make","abortController","AbortController","getOperationName","body","fetchOptions","extraOptions","method","headers","signal","uri","queryParams","encodeURIComponent","convertToGet","ended","opts","statusNotOk","fetch","res","makeResult","makeErrorResult","executeFetch","next","complete","createFetchSource","fetchResults$","exchanges","payload","exchange","defaultExchanges","dedupExchange","cacheExchange","fetchExchange","Client","url","preferGetMethod","type","request","response$","switchMap","fromValue","interval","pollInterval","makeSubject","isDispatching","nextOperation","queued","composeExchanges","fallbackExchangeIO","isClient","params","isCached","serialized","deserialized","restore","ssr","enableAllOperations","observableish","forwardSubscription","isComplete","sub","isSubscriptionOperation","createSubscriptionSource","subscriptionResults$","prevActive","operationResults$","onStart","onEnd","sink","shared","hasResult","hasSuspended","takeWhile","toSuspenseSource","result$","suspense","withPromise","createRequest"],"mappings":"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"}