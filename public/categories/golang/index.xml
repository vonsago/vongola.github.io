<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Vassago&#39;s Blog</title>
    <link>/categories/golang/</link>
    <description>Recent content in Golang on Vassago&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Â© 2015-{year} Ars Von Geotia. All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 29 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goroutine Pool</title>
      <link>/categories/golang/process_pool/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/categories/golang/process_pool/</guid>
      <description>1package test 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;runtime&amp;#34; 6 &amp;#34;testing&amp;#34; 7 &amp;#34;time&amp;#34; 8) 9 10type PPool struct { 11 EntryChan chan func() error 12 JobChan chan func() error 13 WorkNum int 14} 15 16func NewPPool(cap int) *PPool { 17 p := PPool{ 18 EntryChan: make(chan func() error), 19 JobChan: make(chan func() error), 20 WorkNum: cap, 21 } 22 return &amp;amp;p 23} 24 25func (p *PPool) worker(wId int) { 26</description>
    </item>
    
    <item>
      <title>Fan vs go func</title>
      <link>/categories/golang/fan/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/categories/golang/fan/</guid>
      <description>test script 1func gen(nums ...int) &amp;lt;-chan int { 2 out := make(chan int) 3 go func() { 4 for _, n := range nums { 5 out &amp;lt;- n 6 } 7 close(out) 8 }() 9 return out 10} 11func sq(in &amp;lt;-chan int) &amp;lt;-chan int { 12 out := make(chan int) 13 go func() { 14 for n := range in { 15 out &amp;lt;- n * n 16 } 17 close(out) 18 }() 19 return out 20} 21 22func merge(cs .</description>
    </item>
    
  </channel>
</rss>
