<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on Vassago&#39;s Blog</title>
    <link>/categories/</link>
    <description>Recent content in Categories on Vassago&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2015-{year} Ars Von Geotia. All Rights Reserved.</copyright>
    <lastBuildDate>Fri, 13 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="/categories/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis Mongodb Mysql</title>
      <link>/categories/data/rds2mys2mon/</link>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/categories/data/rds2mys2mon/</guid>
      <description>Redis MongoDB MySQL 数据模型: 基于键值的内存数据存储 永久性文档数据库，将数据存储在 JSON 文档中，然后将其整理成集合 将数据存储在列和行中。数据存储是表格式和关系</description>
    </item>
    
    <item>
      <title>Tuning page size and compression of mongodb</title>
      <link>/categories/data/mongodb_p1/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/categories/data/mongodb_p1/</guid>
      <description>Mongodb 存储到底是Btree 还是B+tree 实际上要讨论的是 WiredTiger 存储引擎到底是什么结构 提前要对齐的几件事情 文档中称表是B-Trees是一种简单表达，</description>
    </item>
    
    <item>
      <title>Goroutine Pool</title>
      <link>/categories/golang/process_pool/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/categories/golang/process_pool/</guid>
      <description>1package test 2 3import ( 4 &amp;#34;fmt&amp;#34; 5 &amp;#34;runtime&amp;#34; 6 &amp;#34;testing&amp;#34; 7 &amp;#34;time&amp;#34; 8) 9 10type PPool struct { 11 EntryChan chan func() error 12 JobChan chan func() error 13 WorkNum int 14} 15 16func NewPPool(cap int) *PPool { 17 p := PPool{ 18 EntryChan: make(chan func() error), 19 JobChan: make(chan func() error), 20 WorkNum: cap, 21 } 22 return &amp;amp;p 23} 24 25func (p *PPool) worker(wId int) { 26</description>
    </item>
    
    <item>
      <title>Install kubernetes(k8s) with kubeadm</title>
      <link>/categories/k8s/install/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/categories/k8s/install/</guid>
      <description>Version Choise .ref https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/ kubeadm version: &amp;amp;version.Info{Major:&amp;ldquo;1&amp;rdquo;, Minor:&amp;ldquo;26&amp;rdquo;, GitVersion:&amp;ldquo;v1.26.1&amp;rdquo;, GitCommit:&amp;ldquo;8f94681cd294aa8cfd3407b8191f6c70214973a4&amp;rdquo;, GitTreeState:&amp;ldquo;clean&amp;rdquo;, BuildDate:&amp;ldquo;2023-01-18T15:56:50Z&amp;rdquo;, GoVersion:&amp;ldquo;go1.19.5&amp;rdquo;, Compiler:&amp;ldquo;gc&amp;rdquo;, Platform:&amp;ldquo;linux/amd64&amp;rdquo;} docker Version: 20.10.12 containerd: 1.6.18 Prepare 1# check swap off with free -m .ref https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/ 2swapoff -a 3 4 5# check port is available 6nc 127.0.0.1 6443 7 8# some host dependences 9apt install socat conntrack 10 11# Kubernetes package repositories 12sudo apt-get update 13sudo apt-get install -y apt-transport-https ca-certificates curl 14 15curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key</description>
    </item>
    
    <item>
      <title>Install redis cluster with docker-compose</title>
      <link>/categories/data/redis/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>/categories/data/redis/</guid>
      <description>创建目录 mkdir -p /usr/local/docker-redis/redis-cluster 切换至指定目录 cd /usr/local/docker-redis/redis-cluster/ 编写 redis-cluster.tmpl 文件 vi redis-cluster.tmpl 1port ${PORT} 2requirepass 1234 3masterauth 1234 4protected-mode no 5daemonize no 6appendonly yes 7cluster-enabled yes 8cluster-config-file nodes.conf 9cluster-node-timeout 15000 10cluster-announce-ip 192.168.10.10 11cluster-announce-port ${PORT} 12cluster-announce-bus-port 1${PORT} mkdir conf &amp;amp; data path 1 2for port in `seq 6371 6373`; do \ 3 mkdir -p ${port}/conf \ 4 &amp;amp;&amp;amp; PORT=${port} envsubst</description>
    </item>
    
    <item>
      <title>DNS use both the protocols TCP and UDP</title>
      <link>/categories/network/dns/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/categories/network/dns/</guid>
      <description>UDP packets can&amp;rsquo;t be greater than 512 bytes.
TCP is used for Zone transfer and UDP for name, and queries either regular (primary) or reverse.
There should be consistency in DNS Zone database.</description>
    </item>
    
    <item>
      <title>History of HTTP</title>
      <link>/categories/network/http/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/categories/network/http/</guid>
      <description>HTTP 0.9 也叫做单行（one-line）协议，基于 TCP 只允许 GET，只会响应 HTML 格式的字符串 HTTP 1.0 增加了请求头，版本号（比如 content-type，就</description>
    </item>
    
    <item>
      <title>Service Discovery</title>
      <link>/categories/k8s/discovery/</link>
      <pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>/categories/k8s/discovery/</guid>
      <description>一致性协议算法主要有Paxos、Raft、ZAB。 Zookeeper Eureka Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管</description>
    </item>
    
    <item>
      <title>HTTP Method POST vs GET</title>
      <link>/categories/network/post/</link>
      <pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/categories/network/post/</guid>
      <description>语义角度 GET 通常用于获取资源或者执行无副作用的操作 POST 通常用于提交数据并执行更改服务器状态的操作（服务器需要更多时间来处理 POST 请求） 安全角度 GET 请求</description>
    </item>
    
    <item>
      <title>Fan vs go func</title>
      <link>/categories/golang/fan/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/categories/golang/fan/</guid>
      <description>test script 1func gen(nums ...int) &amp;lt;-chan int { 2 out := make(chan int) 3 go func() { 4 for _, n := range nums { 5 out &amp;lt;- n 6 } 7 close(out) 8 }() 9 return out 10} 11func sq(in &amp;lt;-chan int) &amp;lt;-chan int { 12 out := make(chan int) 13 go func() { 14 for n := range in { 15 out &amp;lt;- n * n 16 } 17 close(out) 18 }() 19 return out 20} 21 22func merge(cs .</description>
    </item>
    
    <item>
      <title>DevOps!</title>
      <link>/categories/workway/cicd/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/categories/workway/cicd/</guid>
      <description>what is devops DevOps 是一种工作模式，集合文化理念、实践和工具，来使团队的工作合作更高效，交付更便捷可靠。 why need devops 懒 因为它可以帮我们自动的处理一些苦燥的任务</description>
    </item>
    
    <item>
      <title>Docker Log</title>
      <link>/categories/k8s/log/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/categories/k8s/log/</guid>
      <description>Docker docker 支持的日志驱动，配置文件 /etc/docker/daemon.json none 没有容器日志，无任何输出 local 自定义格式存储 json-file 默认驱动程序，json syslog 依赖 syslog 守护进程，可指定路径 journald 依赖 journald 守护进程</description>
    </item>
    
    <item>
      <title>Docker Stats</title>
      <link>/categories/docker/docker-stats/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/categories/docker/docker-stats/</guid>
      <description>Docker Stats 1是基于docker 1.10.3版本的源码， 2对docker stats命令进行源码分析，看看docker stats命令输出的数据是从cg</description>
    </item>
    
    <item>
      <title>Kubernetes Beginner</title>
      <link>/categories/k8s/kubernetes-learn/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/categories/k8s/kubernetes-learn/</guid>
      <description>调度 网络 容器网络模式 none: 完全隔离，既不访问外部网络，也不提供服务访问自己。可以用于测试容器，为后续容器创建网络环境容器 host: 共享宿主机网络，性能好</description>
    </item>
    
    <item>
      <title>Game Theory</title>
      <link>/categories/algorithm/game-theory/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/categories/algorithm/game-theory/</guid>
      <description>一般认为，博弈主要可以分为合作博弈和非合作博弈，他们的区别在于博弈方之间是否存在一个具有约束力的协议 博弈论 博弈题库 （一）巴什博奕（Bash G</description>
    </item>
    
  </channel>
</rss>
