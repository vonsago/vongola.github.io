{"version":3,"sources":["webpack:///./src/pages/dash-board.mdx","webpack:///./node_modules/@pauliescanlon/gatsby-theme-terminal/src/layouts/PageLayout.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","SiteMetaData","Divider","SourceWords","Flex","Box","Heading","Donut","Text","SourceList","SourceDays","SourceMonths","SourceTags","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","siteMetadata","description","source","wordCountTotal","wordCountAverage","wordCountHighest","timeToReadTotal","wordCountLowest","timeToReadAverage","sx","flexWrap","mx","theme","space","display","flex","flexDirection","mb","px","width","alignItems","backgroundColor","justifyContent","p","position","as","variant","value","textAlign","color","fontSize","fontWeight","lineHeight","sourceWords","currentYear","wordCountByMonth","length","mr","year","height","map","month","index","initial","words","key","pl","pr","textTransform","edge","title","node","frontmatter","sourceDays","day","count","percent","sourceMonths","tag","bg","isMDXComponent","PageLayout","children","useConfig","site","keywords","siteUrl","siteImage","lang","pathname","location","titleTemplate","replace","type","image","path"],"mappings":"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","file":"component---src-pages-dash-board-mdx-438a68b6a4ca4ab70893.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/vassagovon/myProject/venv3/Github/BLOG/vongola.github.io/node_modules/@pauliescanlon/gatsby-theme-terminal/src/layouts/PageLayout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst SiteMetaData = makeShortcode(\"SiteMetaData\");\nconst Divider = makeShortcode(\"Divider\");\nconst SourceWords = makeShortcode(\"SourceWords\");\nconst Flex = makeShortcode(\"Flex\");\nconst Box = makeShortcode(\"Box\");\nconst Heading = makeShortcode(\"Heading\");\nconst Donut = makeShortcode(\"Donut\");\nconst Text = makeShortcode(\"Text\");\nconst SourceList = makeShortcode(\"SourceList\");\nconst SourceDays = makeShortcode(\"SourceDays\");\nconst SourceMonths = makeShortcode(\"SourceMonths\");\nconst SourceTags = makeShortcode(\"SourceTags\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1><a parentName=\"h1\" {...{\n        \"href\": \"#site-meta-data\"\n      }}>{`SiteMetaData`}</a></h1>\n    <SiteMetaData mdxType=\"SiteMetaData\">\n      {siteMetadata => {\n        const {\n          name,\n          description\n        } = siteMetadata;\n        return <ul>\n        <li>{name}</li>\n        <li>{description}</li>\n      </ul>;\n      }}\n    </SiteMetaData>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-words\"\n      }}>{`SourceWords`}</a></h2>\n    <p>{`By default source words returns a word count for all words found in the `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` sourced from the directories defined in \\`gatsby-config.js.`}</p>\n    <p>{`You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceTags filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your \\`gatsby-config.js\\`\\``}</p>\n    <SourceWords mdxType=\"SourceWords\">\n    {source => {\n        const {\n          wordCountTotal,\n          wordCountAverage,\n          wordCountHighest,\n          wordCountLowest,\n          timeToReadTotal,\n          timeToReadAverage\n        } = source;\n        return <Flex sx={{\n          flexWrap: 'wrap',\n          mx: theme => `-${theme.space[2]}px`\n        }} mdxType=\"Flex\">\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Average word count\n              </Heading>\n              <Donut sx={{\n                mx: 3,\n                mb: 2\n              }} value={wordCountAverage / wordCountTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'primary',\n                  fontSize: '22px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {wordCountAverage}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'primary',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Words\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Average time to read\n              </Heading>\n              <Donut variant=\"styles.donut.secondary\" sx={{\n                mx: 3,\n                mb: 2\n              }} value={timeToReadAverage / timeToReadTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'secondary',\n                  fontSize: '20px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {timeToReadAverage}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'secondary',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Minute\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total read time: ${timeToReadTotal} mins`}</Text>\n            </Flex>\n          </Box>\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Highest word count\n              </Heading>\n              <Donut variant=\"styles.donut.success\" sx={{\n                mx: 3,\n                mb: 2\n              }} value={wordCountHighest / wordCountTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'success',\n                  fontSize: '20px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {wordCountHighest}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'success',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Words\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n        </Flex>;\n      }}\n  </SourceWords>\n    <Divider mdxType=\"Divider\" />\n    <SourceWords mdxType=\"SourceWords\">\n  {sourceWords => {\n        const currentYear = sourceWords.wordCountByMonth[sourceWords.wordCountByMonth.length - 1];\n        return <Box sx={{\n          backgroundColor: 'surface',\n          p: 3\n        }} mdxType=\"Box\">\n        <Flex mdxType=\"Flex\">\n        <Heading variant=\"styles.h4\" sx={{\n              mr: 2\n            }} mdxType=\"Heading\">{currentYear[0].year}</Heading>\n        <Text mdxType=\"Text\">Word count by month</Text>\n        </Flex>\n        <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            height: 300\n          }} mdxType=\"Box\">\n          <Flex sx={{\n              flexWrap: 'wrap',\n              width: '100%'\n            }} mdxType=\"Flex\">\n            {currentYear.map((month, index) => {\n                const {\n                  initial,\n                  words\n                } = month;\n                return <Box key={index} sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'flex-end',\n                  pl: 1,\n                  pr: 1,\n                  width: `${100 / currentYear.length}%`\n                }} mdxType=\"Box\">\n                 <Text sx={{\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {`x${words}`}\n                  </Text>\n                  <Box sx={{\n                    backgroundColor: 'primary',\n                    height: `${words}%`,\n                    p: 1\n                  }} mdxType=\"Box\" />\n                  <Text sx={{\n                    textTransform: 'uppercase',\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {initial}\n                  </Text>\n                </Box>;\n              })}\n          </Flex>\n        </Box>\n      </Box>;\n      }}\n    </SourceWords>\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-list\"\n      }}>{`SourceList`}</a></h2>\n    <SourceList mdxType=\"SourceList\">\n  {source => <ul>\n      {source.map((edge, index) => {\n          const {\n            frontmatter: {\n              title\n            }\n          } = edge.node;\n          return <li key={index}>{title}</li>;\n        })}\n    </ul>}\n    </SourceList>\n    <Divider mdxType=\"Divider\" />\n    <SourceDays mdxType=\"SourceDays\">\n  {sourceDays => {\n        const currentYear = sourceDays[sourceDays.length - 1];\n        return <Box mdxType=\"Box\">\n        {currentYear.map((day, index) => {\n            const {\n              name,\n              count,\n              percent\n            } = day;\n            return <Flex key={index} sx={{\n              backgroundColor: 'surface',\n              flexDirection: 'column',\n              mb: 2,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Box sx={{\n                backgroundColor: 'primary',\n                height: '100%',\n                position: 'absolute',\n                width: `${percent}%`\n              }} mdxType=\"Box\" />\n              <Box sx={{\n                position: 'relative',\n                display: 'flex',\n                justifyContent: 'space-between'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textTransform: 'capitalize',\n                  pl: 2\n                }} mdxType=\"Text\">\n                  {name}\n                </Text>\n                <Text sx={{\n                  pr: 2\n                }} mdxType=\"Text\">{`x${count}`}</Text>\n              </Box>\n            </Flex>;\n          })}\n      </Box>;\n      }}\n    </SourceDays>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-months\"\n      }}>{`SourceMonths`}</a></h2>\n    <p>{`By default source months returns an accumulated count and percent of all `}<inlineCode parentName=\"p\">{`frontmatter`}</inlineCode>{` date fields grouped by year. You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceMonths filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <SourceMonths mdxType=\"SourceMonths\">\n  {sourceMonths => {\n        const currentYear = sourceMonths[sourceMonths.length - 1];\n        return <Box sx={{\n          backgroundColor: 'surface',\n          p: 3\n        }} mdxType=\"Box\">\n        <Heading variant=\"styles.h4\" mdxType=\"Heading\">{currentYear[0].year}</Heading>\n        <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            height: 300\n          }} mdxType=\"Box\">\n          <Flex sx={{\n              flexWrap: 'wrap',\n              width: '100%'\n            }} mdxType=\"Flex\">\n            {currentYear.map((month, index) => {\n                const {\n                  initial,\n                  count,\n                  percent\n                } = month;\n                return <Box key={index} sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'flex-end',\n                  pl: 1,\n                  pr: 1,\n                  width: `${100 / currentYear.length}%`\n                }} mdxType=\"Box\">\n                 <Text sx={{\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {`x${count}`}\n                  </Text>\n                  <Box sx={{\n                    backgroundColor: 'primary',\n                    height: `${percent}%`,\n                    p: 1\n                  }} mdxType=\"Box\" />\n                  <Text sx={{\n                    textTransform: 'uppercase',\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {initial}\n                  </Text>\n                </Box>;\n              })}\n          </Flex>\n        </Box>\n      </Box>;\n      }}\n    </SourceMonths>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#tag-list\"\n      }}>{`SourceTags`}</a></h2>\n    <p>{`By default source tags returns all tags found in the `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` sourced from the directories defined in \\`gatsby-config.js.`}</p>\n    <p>{`You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceTags filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your \\`gatsby-config.js\\`\\``}</p>\n    <SourceTags mdxType=\"SourceTags\">\n  {source => <Flex sx={{\n        flexDirection: 'column'\n      }} mdxType=\"Flex\">\n      {source.map((tag, index) => {\n          const {\n            name,\n            count,\n            percent\n          } = tag;\n          return <Box key={index} mdxType=\"Box\">\n            {`${name}  x${count}`}\n            <Box mb={2} bg='muted' sx={{\n              width: `${percent}%`,\n              height: 4\n            }} mdxType=\"Box\"></Box>\n          </Box>;\n        })}\n    </Flex>}\n    </SourceTags>\n    <Divider mdxType=\"Divider\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport { Fragment } from 'react'\nimport { jsx } from 'theme-ui'\nimport { Location } from '@reach/router'\nimport { ContextProvider } from '../context'\n\nimport { Seo } from '../components/Seo'\nimport { Main } from '../components/Main'\n\nimport { useConfig } from '../data'\n\nconst PageLayout = ({ children }) => {\n  const {\n    site: {\n      siteMetadata: { name, description, keywords, siteUrl, siteImage, lang },\n    },\n  } = useConfig()\n\n  // console.log('name: ', name)\n  // console.log('description: ', description)\n  // console.log('keywords: ', keywords)\n  // console.log('siteUrl: ', siteUrl)\n  // console.log('siteImage: ', siteImage)\n  // console.log('lang: ', lang)\n\n  return (\n    <ContextProvider>\n      <Main>\n        <Location>\n          {({ location }) => {\n            const { pathname } = location\n            // console.log('pathName: ', pathname)\n            const titleTemplate = pathname.replace(/\\//gm, '')\n            return (\n              <Fragment>\n                <Seo\n                  type=\"website\"\n                  title={name}\n                  titleTemplate={titleTemplate}\n                  description={description}\n                  siteUrl={siteUrl}\n                  image={siteImage}\n                  path={pathname}\n                  keywords={keywords}\n                  lang={lang}\n                />\n              </Fragment>\n            )\n          }}\n        </Location>\n        {children}\n      </Main>\n    </ContextProvider>\n  )\n}\n\nexport default PageLayout\n"],"sourceRoot":""}